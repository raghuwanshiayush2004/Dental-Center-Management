{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\OneDrive\\\\Desktop\\\\Dental Center Management\\\\src\\\\context\\\\DataContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect } from 'react';\nimport { getPatients, savePatients, getAppointments, saveAppointments, getFiles, saveFiles } from '../utils/storage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DataContext = /*#__PURE__*/createContext();\nexport const DataProvider = ({\n  children\n}) => {\n  _s();\n  const [patients, setPatients] = useState([]);\n  const [appointments, setAppointments] = useState([]);\n  const [files, setFiles] = useState([]);\n  useEffect(() => {\n    setPatients(getPatients());\n    setAppointments(getAppointments());\n    setFiles(getFiles());\n  }, []);\n  const addPatient = patient => {\n    const newPatients = [...patients, patient];\n    setPatients(newPatients);\n    savePatients(newPatients);\n  };\n  const updatePatient = (id, updatedPatient) => {\n    const newPatients = patients.map(p => p.id === id ? updatedPatient : p);\n    setPatients(newPatients);\n    savePatients(newPatients);\n  };\n  const deletePatient = id => {\n    const newPatients = patients.filter(p => p.id !== id);\n    setPatients(newPatients);\n    savePatients(newPatients);\n  };\n  const addAppointment = appointment => {\n    const newAppointments = [...appointments, appointment];\n    setAppointments(newAppointments);\n    saveAppointments(newAppointments);\n  };\n  const updateAppointment = (id, updatedAppointment) => {\n    const newAppointments = appointments.map(a => a.id === id ? updatedAppointment : a);\n    setAppointments(newAppointments);\n    saveAppointments(newAppointments);\n  };\n  const deleteAppointment = id => {\n    const newAppointments = appointments.filter(a => a.id !== id);\n    setAppointments(newAppointments);\n    saveAppointments(newAppointments);\n  };\n  const addFile = (appointmentId, file) => {\n    const newFiles = [...files, {\n      ...file,\n      appointmentId\n    }];\n    setFiles(newFiles);\n    saveFiles(newFiles);\n  };\n  const deleteFile = fileId => {\n    const newFiles = files.filter(f => f.id !== fileId);\n    setFiles(newFiles);\n    saveFiles(newFiles);\n  };\n  const getPatientAppointments = patientId => {\n    return appointments.filter(a => a.patientId === patientId);\n  };\n  const getAppointmentFiles = appointmentId => {\n    return files.filter(f => f.appointmentId === appointmentId);\n  };\n  return /*#__PURE__*/_jsxDEV(DataContext.Provider, {\n    value: {\n      patients,\n      appointments,\n      files,\n      addPatient,\n      updatePatient,\n      deletePatient,\n      addAppointment,\n      updateAppointment,\n      deleteAppointment,\n      addFile,\n      deleteFile,\n      getPatientAppointments,\n      getAppointmentFiles\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n_s(DataProvider, \"XpfUYceXVAxxCsMYXE3dNRBRiio=\");\n_c = DataProvider;\nexport const useData = () => {\n  _s2();\n  return useContext(DataContext);\n};\n_s2(useData, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"DataProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","getPatients","savePatients","getAppointments","saveAppointments","getFiles","saveFiles","jsxDEV","_jsxDEV","DataContext","DataProvider","children","_s","patients","setPatients","appointments","setAppointments","files","setFiles","addPatient","patient","newPatients","updatePatient","id","updatedPatient","map","p","deletePatient","filter","addAppointment","appointment","newAppointments","updateAppointment","updatedAppointment","a","deleteAppointment","addFile","appointmentId","file","newFiles","deleteFile","fileId","f","getPatientAppointments","patientId","getAppointmentFiles","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useData","_s2","$RefreshReg$"],"sources":["C:/Users/Dell/OneDrive/Desktop/Dental Center Management/src/context/DataContext.js"],"sourcesContent":["import { createContext, useContext, useState, useEffect } from 'react';\r\nimport { \r\n  getPatients, \r\n  savePatients, \r\n  getAppointments, \r\n  saveAppointments, \r\n  getFiles, \r\n  saveFiles \r\n} from '../utils/storage';\r\n\r\nconst DataContext = createContext();\r\n\r\nexport const DataProvider = ({ children }) => {\r\n  const [patients, setPatients] = useState([]);\r\n  const [appointments, setAppointments] = useState([]);\r\n  const [files, setFiles] = useState([]);\r\n\r\n  useEffect(() => {\r\n    setPatients(getPatients());\r\n    setAppointments(getAppointments());\r\n    setFiles(getFiles());\r\n  }, []);\r\n\r\n  const addPatient = (patient) => {\r\n    const newPatients = [...patients, patient];\r\n    setPatients(newPatients);\r\n    savePatients(newPatients);\r\n  };\r\n\r\n  const updatePatient = (id, updatedPatient) => {\r\n    const newPatients = patients.map(p => p.id === id ? updatedPatient : p);\r\n    setPatients(newPatients);\r\n    savePatients(newPatients);\r\n  };\r\n\r\n  const deletePatient = (id) => {\r\n    const newPatients = patients.filter(p => p.id !== id);\r\n    setPatients(newPatients);\r\n    savePatients(newPatients);\r\n  };\r\n\r\n  const addAppointment = (appointment) => {\r\n    const newAppointments = [...appointments, appointment];\r\n    setAppointments(newAppointments);\r\n    saveAppointments(newAppointments);\r\n  };\r\n\r\n  const updateAppointment = (id, updatedAppointment) => {\r\n    const newAppointments = appointments.map(a => a.id === id ? updatedAppointment : a);\r\n    setAppointments(newAppointments);\r\n    saveAppointments(newAppointments);\r\n  };\r\n\r\n  const deleteAppointment = (id) => {\r\n    const newAppointments = appointments.filter(a => a.id !== id);\r\n    setAppointments(newAppointments);\r\n    saveAppointments(newAppointments);\r\n  };\r\n\r\n  const addFile = (appointmentId, file) => {\r\n    const newFiles = [...files, { ...file, appointmentId }];\r\n    setFiles(newFiles);\r\n    saveFiles(newFiles);\r\n  };\r\n     const deleteFile = (fileId) => {\r\n    const newFiles = files.filter(f => f.id !== fileId);\r\n    setFiles(newFiles);\r\n    saveFiles(newFiles);\r\n  };\r\n\r\n  const getPatientAppointments = (patientId) => {\r\n    return appointments.filter(a => a.patientId === patientId);\r\n  };\r\n\r\n  const getAppointmentFiles = (appointmentId) => {\r\n    return files.filter(f => f.appointmentId === appointmentId);\r\n  };\r\n\r\n\r\n  return (\r\n    <DataContext.Provider value={{\r\n      patients,\r\n      appointments,\r\n      files,\r\n      addPatient,\r\n      updatePatient,\r\n      deletePatient,\r\n      addAppointment,\r\n      updateAppointment,\r\n      deleteAppointment,\r\n      addFile,\r\n      deleteFile,\r\n      getPatientAppointments,\r\n      getAppointmentFiles\r\n    }}>\r\n      {children}\r\n    </DataContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useData = () => useContext(DataContext);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}